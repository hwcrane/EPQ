{"version":3,"sources":["components/controlls/speedSelector.tsx","algorithms.ts","components/info/description.tsx","components/sorting/progressBar.tsx","components/controlls/algoritmSelector.tsx","components/controlls/backButton.tsx","components/controlls/startStopButton.tsx","components/controlls/forwardButton.tsx","components/controlls/resetButton.tsx","components/controlls/numOBarsSelector.tsx","components/sorting/bar.tsx","components/sorting/barContainer.tsx","components/info/metrics.tsx","components/info/colourInfo.tsx","components/sorting/Sorting.tsx","components/navigation/navTitle.tsx","components/navigation/navBar.tsx","index.tsx"],"names":["SpeedSelector","props","speed","setSpeed","current","value","React","createRef","className","type","ref","this","onChange","max","defaultValue","min","step","Component","bubble","bars","stages","comparisons","swaps","push","JSON","parse","stringify","swapped","n","length","i","state","size","quick","quickSort","nextstages","concat","first","last","pivot","index","insertion","j","merge","mid","Math","floor","mergeSort","mergeArray","final","leftLen","rightLen","tempLeft","tempRight","indexOfLeft","indexOfRight","indexOfMain","selected1","selected2","splice","selection","Description","info","title","text","selectedAlgorithm","ProgressBar","style","width","stage","toString","AlgoritmSelector","algorthmSelected","setAlgorithm","onInput","algorithms","map","a","indexOf","BackButton","stepBackward","onClick","icon","faStepBackward","StartStopButton","togglePlayState","buttonlbl","isRunning","faPause","faPlay","ForwardButton","stepForward","faStepForward","ResetButton","reset","faRandom","NumOBarsSelector","makeBars","Bar","col","height","maxSize","background","transition","BarContainer","bar","Metrics","ColourInfo","pause","time","Promise","resolve","setTimeout","Sorting","numOBars","sortingStages","sortingStage","stagesGenerated","newbar","b","random","setState","algorithm","prevState","runAlgorithm","alert","visulise","NavTitle","NavBar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7017ffe7.chunk.js","sourcesContent":["import React from \"react\";\nimport { speedSelectorProps } from \"../../types\";\nimport \"../../App.css\";\n\n// react component for the control pannel\nexport default class SpeedSelector extends React.Component<speedSelectorProps> {\n    speed: React.RefObject<HTMLInputElement>;\n\n    constructor(props: any) {\n        super(props);\n        this.speed = React.createRef(); // creates a ref to be assigned to the speed slider\n    }\n\n    // calls the setSpeed method in the App class\n    setSpeed = () => {\n        var speed: any = this.speed.current?.value; // get value from range\n        this.props.setSpeed(1000 - speed);\n    };\n\n    public render() {\n        return (\n            <div className=\"speedSelectorContainer\">\n                Speed:\n                <input // speed range\n                    className=\"speedSelector\"\n                    type=\"range\"\n                    ref={this.speed} // linking to the speed ref element\n                    onChange={() => this.setSpeed()} // call the setSpeed method whenever the value of the range is changed\n                    max={1000}\n                    defaultValue={750}\n                    min={500}\n                    step={50}\n                />\n            </div>\n        );\n    }\n}\n","import { bar, stage } from \"./types\";\n\nexport const bubble = (bars: bar[]): stage[] => {\n    var stages: stage[] = [];\n    var comparisons = 0;\n    var swaps = 0;\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    }); // push first stage to array\n\n    var swapped = true;\n    for (var n = 0; n < bars.length && swapped; n++) {\n        // stop once a pass has completed with no swaps\n        swapped = false;\n        for (var i = 0; i < bars.length - 1 - n; i++) {\n            // loops through the array, with each pass one less element needs to be checked as you know is in the correct position\n\n            // sets current bars' state\n            bars[i].state = \"selected\";\n            bars[i + 1].state = \"selected\";\n\n            comparisons++;\n\n            if (bars[i].size > bars[i + 1].size) {\n                stages.push({\n                    bars: JSON.parse(JSON.stringify(bars)),\n                    swaps: swaps,\n                    comparisons: comparisons,\n                }); // pushes step to stages\n\n                [bars[i], bars[i + 1]] = [bars[i + 1], bars[i]]; // swaps elements\n                swapped = true;\n                swaps++;\n            }\n            stages.push({\n                bars: JSON.parse(JSON.stringify(bars)),\n                swaps: swaps,\n                comparisons: comparisons,\n            }); // pushes step to stages\n\n            // sets bars back to unsorted\n            bars[i].state = \"unsorted\";\n            bars[i + 1].state = \"unsorted\";\n        }\n        bars[bars.length - n - 1].state = \"sorted\"; // sets the last bar to sorted\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        }); // pushes step to stages\n\n        // once no swaps have been made, all the remaining bars are looped through and set to sorted\n        if (!swapped) {\n            for (var i = 0; i < bars.length - 1 - n; i++) {\n                bars[i].state = \"sorted\";\n                stages.push({\n                    bars: JSON.parse(JSON.stringify(bars)),\n                    swaps: swaps,\n                    comparisons: comparisons,\n                }); // pushes step to stages\n            }\n        }\n    }\n\n    return stages;\n};\n\n\nexport const quick = (bars: bar[]): stage[] => {\n    var stages: stage[] = [];\n    var comparisons = 0;\n    var swaps = 0;\n    // Push first stage to array\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    });\n\n    // Run quicksort algorithm\n    var [nextstages, swaps, comparisons] = quickSort(bars, swaps, comparisons, 0, bars.length)\n    stages = stages.concat(nextstages);\n\n    // Push final stages to array\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    });\n\n    return stages;\n}\n\nconst quickSort = (bars: bar[], swaps: number, comparisons: number, first: number, last: number): [stage[], number, number] => {\n    var stages: stage[] = [];\n    if (last - first <= 1) {\n        comparisons++;\n        try {\n            bars[first].state = \"sorted\";\n        } catch { bars[0].state = \"sorted\" }\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n        return [stages, swaps, comparisons];\n    }\n\n    var pivot = first;\n    bars[pivot].state = \"pivot\";\n\n    var index = pivot + 1;\n\n    for (let i = index; i < last; i++) {\n        bars[i].state = \"selected\";\n        comparisons++;\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n        if (bars[i].size < bars[pivot].size) {\n            swaps++;\n            bars[index].state = \"selected\";\n            [bars[i], bars[index]] = [bars[index], bars[i]]; // swaps elements\n            stages.push({\n                bars: JSON.parse(JSON.stringify(bars)),\n                swaps: swaps,\n                comparisons: comparisons,\n            });\n            bars[i].state = \"unsorted\"\n            bars[index].state = \"unsorted\"\n            index++;\n        }\n        bars[i].state = \"unsorted\";\n\n    }\n    [bars[pivot], bars[index - 1]] = [bars[index - 1], bars[pivot]];\n    bars[pivot].state = \"unsorted\";\n    bars[index - 1].state = \"pivot\";\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    });\n    bars[index - 1].state = \"sorted\";\n\n    var [nextstages, swaps, comparisons] = quickSort(bars, swaps, comparisons, first, index - 1)\n    stages = stages.concat(nextstages);\n\n    var [nextstages, swaps, comparisons] = quickSort(bars, swaps, comparisons, index, last)\n    stages = stages.concat(nextstages);\n\n    return [stages, swaps, comparisons];\n}\n\nexport const insertion = (bars: bar[]): stage[] => {\n    var stages: stage[] = [];\n    var comparisons = 0;\n    var swaps = 0;\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    }); // push first stage to array\n\n    for (var i = 1; i < bars.length; i++) {\n        for (var j = i; j > 0; j--) {\n            bars[j].state = \"selected\";\n            bars[j - 1].state = \"selected\";\n            comparisons++;\n            stages.push({\n                bars: JSON.parse(JSON.stringify(bars)),\n                swaps: swaps,\n                comparisons: comparisons,\n            });\n            if (bars[j - 1].size > bars[j].size) {\n                swaps++;\n                [bars[j], bars[j - 1]] = [bars[j - 1], bars[j]]; // swaps elements\n                stages.push({\n                    bars: JSON.parse(JSON.stringify(bars)),\n                    swaps: swaps,\n                    comparisons: comparisons,\n                });\n                bars[j].state = \"sorted\";\n                bars[j - 1].state = \"sorted\";\n            } else {\n                bars[j].state = \"sorted\";\n                bars[j - 1].state = \"sorted\";\n                break;\n            }\n        }\n    }\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    });\n    return stages;\n}\n\nexport const merge = (bars: bar[]): stage[] => {\n    var stages: stage[] = [];\n    var comparisons = 0;\n    var swaps = 0;\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    }); // push first stage to array\n\n    let first = 0;\n    let last = bars.length - 1;\n    var mid = Math.floor(first + (last - first) / 2);\n\n    var [nextstages, swaps, comparisons] = mergeSort(bars, swaps, comparisons, first, mid);\n    stages = stages.concat(nextstages);\n    var [nextstages, swaps, comparisons] = mergeSort(bars, swaps, comparisons, mid + 1, last);\n    stages = stages.concat(nextstages);\n\n    var [bars, nextstages, swaps, comparisons] = mergeArray(bars, first, mid, last, true, swaps, comparisons);\n    stages = stages.concat(nextstages);\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    });\n    return stages;\n}\n\nconst mergeSort = (bars: bar[], swaps: number, comparisons: number, first: number, last: number): [stage[], number, number] => {\n    var stages: stage[] = [];\n    if (first >= last) return [stages, swaps, comparisons];\n\n    var mid = Math.floor(first + (last - first) / 2);\n    var [nextstages, swaps, comparisons] = mergeSort(bars, swaps, comparisons, first, mid);\n    stages = stages.concat(nextstages);\n    var [nextstages, swaps, comparisons] = mergeSort(bars, swaps, comparisons, mid + 1, last);\n    stages = stages.concat(nextstages);\n\n    var [bars, nextstages, swaps, comparisons] = mergeArray(bars, first, mid, last, false, swaps, comparisons);\n    stages = stages.concat(nextstages);\n\n    return [stages, swaps, comparisons]\n}\n\nconst mergeArray = (bars: bar[], first: number, mid: number, last: number, final: boolean, swaps: number, comparisons: number): [bar[], stage[], number, number] => {\n    var stages: stage[] = [];\n    var leftLen = mid - first + 1;\n    var rightLen = last - mid;\n\n    var tempLeft: bar[] = [];\n    var tempRight: bar[] = [];\n\n    for (var i = 0; i < leftLen; i++) {\n        tempLeft[i] = bars[first + i];\n    }\n    for (var i = 0; i < rightLen; i++) {\n        tempRight[i] = bars[mid + 1 + i];\n    }\n\n    var indexOfLeft = 0;\n    var indexOfRight = 0;\n    var indexOfMain = first;\n\n    while (indexOfLeft < tempLeft.length && indexOfRight < tempRight.length) {\n        var selected1 = bars[first + indexOfLeft + indexOfRight];\n        selected1.state = \"selected\";\n        var selected2 = bars[mid + 1 + indexOfRight]\n        selected2.state = \"selected\";\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        }); // push first stage to array\n        if (tempLeft[indexOfLeft].size <= tempRight[indexOfRight].size) {\n            if (final) {\n                selected1.state = \"sorted\";\n                selected2.state = \"unsorted\";\n            }\n            indexOfLeft++;\n        } else {\n            swaps++\n            bars.splice(mid + 1 + indexOfRight, 1);\n            bars.splice(indexOfMain, 0, tempRight[indexOfRight]);\n            if (final) {\n                selected1.state = \"unsorted\";\n                selected2.state = \"sorted\"\n            }\n            indexOfRight++;\n        }\n\n        indexOfMain++;\n        comparisons++\n\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n        if (!final) {\n            selected1.state = \"unsorted\";\n            selected2.state = \"unsorted\";\n        }\n    }\n\n    while (indexOfLeft < tempLeft.length) {\n        var selected1 = bars[first + indexOfLeft + indexOfRight];\n        selected1.state = \"selected\";\n        indexOfLeft++;\n        indexOfMain++;\n        comparisons++\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n        selected1.state = \"unsorted\";\n        if (final) {\n            selected1.state = \"sorted\"\n        }\n    }\n\n    while (indexOfRight < tempRight.length) {\n        var selected2 = bars[mid + 1 + indexOfRight]\n        selected2.state = \"selected\";\n        comparisons++;\n        swaps++;\n        indexOfRight++;\n        indexOfMain++;\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n        selected2.state = \"unsorted\";\n        if (final) {\n            selected2.state = \"sorted\"\n        }\n\n    }\n\n    return [bars, stages, swaps, comparisons]\n}\nexport const selection = (bars: bar[]): stage[] => {\n    var stages: stage[] = [];\n    var comparisons = 0;\n    var swaps = 0;\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    }); // push first stage to array\n\n    for (var i = 0; i < bars.length - 1; i++) {\n        var min = i;\n        bars[min].state = \"selected\";\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n        for (var j = i + 1; j < bars.length; j++) {\n            bars[j].state = \"selected\";\n            comparisons++;\n            if (bars[j].size < bars[min].size) {\n                bars[min].state = \"unsorted\"\n                min = j;\n            }\n            stages.push({\n                bars: JSON.parse(JSON.stringify(bars)),\n                swaps: swaps,\n                comparisons: comparisons,\n            });\n            bars[j].state = \"unsorted\"\n            bars[min].state = \"selected\";\n        }\n\n        if (min != i) {\n            swaps++;\n            [bars[i], bars[min]] = [bars[min], bars[i]];\n        }\n        bars[min].state = \"unsorted\";\n        bars[i].state = \"sorted\";\n        stages.push({\n            bars: JSON.parse(JSON.stringify(bars)),\n            swaps: swaps,\n            comparisons: comparisons,\n        });\n    }\n    bars[bars.length - 1].state = \"sorted\";\n    stages.push({\n        bars: JSON.parse(JSON.stringify(bars)),\n        swaps: swaps,\n        comparisons: comparisons,\n    }); // push first stage to array\n    return stages;\n}\n","import React from \"react\";\nimport \"../../App.css\";\nimport { descriptionProps } from \"../../types\";\n\nexport default class Description extends React.Component<descriptionProps> {\n    render() {\n        var info = {\n            // sets info to be blank\n            title: \"\",\n            text: \"\",\n        };\n\n        switch (this.props.selectedAlgorithm) {\n            case \"\": \n                info = {\n                    title: \"Please Select an Algorithm\",\n                    text: \"\",\n                };\n                break;\n\n            case \"Bubble Sort\":\n                info = {\n                    title: \"Bubble Sort\",\n                    text: \"Bubble sort is one of the simplest algorithms to understand and implement. It works by repeatedly iterating through an array and continuously swapping adjacent elements until the list is in order. If you were sorting in ascending order, the algorithm would step through an array and at every step, it checks if the current element is larger than the next element. If it is, those elements are swapped. Once the algorithm reaches the end of an array, it repeats the process, starting from the begging. This results in the largest elements 'bubbling' up the array. Each iteration of the array is known as a run. You know the array is sorted once no elements are swapped in a run. This is because every element is less than the element that follows itBubble sort is one of the simplest algorithms to understand and implement. It works by repeatedly iterating through an array and continuously swapping adjacent elements until the list is in order. If you were sorting in ascending order, the algorithm would step through an array and at every step, it checks if the current element is larger than the next element. If it is, those elements are swapped. Once the algorithm reaches the end of an array, it repeats the process, starting from the beginning. This results in the largest elements 'bubbling' up the array. Each iteration of the array is known as a run. You know the array is sorted once no elements are swapped in a run. This is because every element is less than the element that follows it.\",\n                };\n                break;\n            case \"Quick Sort\":\n                info = {\n                    title: \"Quick Sort\",\n                    text: \"Quicksort is one of the fastest algorithms to implement. It works by taking a pivot, then moving all the elements greater it to the left or right .depending on whether or not you are sorting in increasing or decreasing order, respectively. This then creates two subsections, one where all elements are greater than the pivot and one where they are less than. This process is then applied recursively to each subsection, with each time splitting a sublist into two more sublists until the list is sorted. You know it is sorted once each subsection is one long.\",\n                };\n                break;\n                case \"Insertion Sort\":\n                    info = {\n                        title: \"Insertion Sort\",\n                        text: \"Insertion sort works by splitting a list into two sections, sorted and unsorted. The first element is automatically classed as sorted. The element directly next to the sorted section is then swapped backwards until it is in order in the sorted area. This means that it is continuously swapped with the element to its left until that element is greater or less than depending on whether or not you are sorting in ascending or descending order. The list is sorted once the unsorted section has no elements yet.\",\n                    };\n                    break;\n                case \"Merge Sort\":\n                    info = {\n                        title: \"Merge Sort\",\n                        text: \"Merge sort works by continuously splitting a list in half until the subsections are of length one. Once a list has been fully broken down, the sections are merged back together in the reverse order. With each merge, the sections are sorted. This means that since both sections are sorted, it is simple to sort them whilst merging by taking the smallest or largest, depending on whether you are sorting in ascending or descending order from both sections until both sections are empty. You know the list is sorted once you have merged back up to the whole list.\",\n                    };\n                    break;\n                case \"Selection Sort\":\n                    info = {\n                        title: \"Selection Sort\",\n                        text: \"Selection sort works by splitting the list into two sections, sorted and unsorted. The sorted section starts empty, then depending on is you are sorting ascending or descending, the smallest or largest element is selected from the unsorted section and moved to the end of sorted. This process is then repeated until the unsorted section is empty and the list is sorted.\",\n                    };\n                    break;\n        }\n\n        return (\n            <div className=\"description\"> \n                <h1 className = \"DescriptionTitle\">{info.title}</h1>\n                <p className = \"DescriptionText\">{info.text}</p>\n            </div>\n        );\n    }\n}\n","import React, { CSSProperties } from \"react\";\nimport { progressBarProps } from \"../../types\";\n\n// component for the progress bar of the visuliser\nexport default class ProgressBar extends React.Component<progressBarProps> {\n    render() {\n        var style: CSSProperties = {\n            width:\n                ((this.props.stage / (this.props.max - 1)) * 100).toString() +\n                \"%\", // sets width proportional to how far it is into the visuliation\n        };\n        return (\n            <div className=\"outerProgressBar\">\n                <div className=\"innerProgressBar\" style={style}></div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { algoritmSelectorProps } from \"../../types\";\n\nexport default class AlgoritmSelector extends React.Component<algoritmSelectorProps> {\n    ref: React.RefObject<HTMLSelectElement>;\n\n    constructor(props: algoritmSelectorProps) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    // calls the setAlgorithm method inside the app class\n    algorthmSelected = () => {\n        this.props.setAlgorithm(this.ref.current?.value);\n    };\n\n    render() {\n        return (\n            <select // Algorithm selector\n                className=\"algorithmSelect\"\n                onInput={() => this.algorthmSelected()}\n                ref={this.ref}\n            >\n                <option value=\"\">Select Algoritm</option>\n                {this.props.algorithms.map((a) => (\n                    <option value={a} key={this.props.algorithms.indexOf(a)}>\n                        {a}\n                    </option>\n                ))}\n            </select>\n        );\n    }\n}\n","import React from \"react\";\nimport { stepBackwardsProps } from \"../../types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStepBackward } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default class BackButton extends React.Component<stepBackwardsProps> {\n    // calls the stepBackward method in the App class\n    stepBackward = () => {\n        this.props.stepBackward();\n    };\n\n    render() {\n        return (\n            <button\n                className=\"backButton controlButton\"\n                onClick={() => this.stepBackward()}\n            >\n                <FontAwesomeIcon size=\"2x\" icon={faStepBackward} />\n            </button>\n        );\n    }\n}\n","import { faPause, faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { startStopProps } from \"../../types\";\n\nexport default class StartStopButton extends React.Component<startStopProps> {\n    // calls the togglePlayState method in the App class\n    togglePlayState = () => {\n        this.props.togglePlayState();\n    };\n\n    render() {\n        var buttonlbl: JSX.Element;\n        if (this.props.isRunning) {\n            buttonlbl = <FontAwesomeIcon size=\"2x\" icon={faPause} />;\n        } else {\n            buttonlbl = <FontAwesomeIcon size=\"2x\" icon={faPlay} />;\n        }\n        return (\n            <button // start stop button\n                className=\"startstop controlButton\"\n                onClick={() => this.togglePlayState()}\n            >\n                {buttonlbl}\n            </button>\n        );\n    }\n}\n","import { faStepForward } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { stepForwardProps } from \"../../types\";\n\nexport default class ForwardButton extends React.Component<stepForwardProps> {\n    // calls the stepForward method in the App class\n    stepForward = () => {\n        this.props.stepForward();\n    };\n\n    render() {\n        return (\n            <button // step forward button\n                className=\"forward controlButton\"\n                onClick={() => this.stepForward()}\n            >\n                <FontAwesomeIcon size=\"2x\" icon={faStepForward} />\n            </button>\n        );\n    }\n}\n","import { faRandom } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { resetButtonProps } from \"../../types\";\n\nexport default class ResetButton extends React.Component<resetButtonProps> {\n    reset = () => {\n        this.props.reset();\n    };\n\n    render() {\n        return (\n            <button // reset button\n                className=\"reset controlButton\"\n                onClick={() => this.reset()}\n            >\n                <FontAwesomeIcon size=\"2x\" icon={faRandom} />\n            </button>\n        );\n    }\n}\n","import React from \"react\";\nimport { numOBarsSelectorProps } from \"../../types\";\n\nexport default class NumOBarsSelector extends React.Component<numOBarsSelectorProps> {\n    ref: React.RefObject<HTMLInputElement>;\n\n    constructor(props: numOBarsSelectorProps) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    // calls the makeBars method from the app class and passes in the value of the length range\n    makeBars = () => {\n        this.props.makeBars(this.ref.current?.value);\n    };\n\n    render() {\n        return (\n            <div className = \"numOfBarsSelectorContainer\">\n                Number of Bars :\n                <input // bat range\n                    type=\"range\"\n                    ref={this.ref} // linking the barSelect ref to the element\n                    onChange={() => this.makeBars()} // call the `makeBars` method whenever the value of the range is changed\n                    min={5}\n                    max={200}\n                    className = \"numOfBarsSelector\"\n                />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { CSSProperties } from \"react\";\nimport { barProps } from \"../../types\";\n\n// React element for the bars\nexport const Bar = (props: barProps) => {\n    switch (\n        props.state // bar colour determined from state\n    ) {\n        case \"unsorted\":\n            var col = \"var(--nord10)\";\n            break;\n        case \"sorted\":\n            var col = \"var(--nord14)\";\n            break;\n        case \"selected\":\n            var col = \"var(--nord11)\";\n            break;\n        case \"pivot\":\n            var col = \"var(--nord15)\";\n            break;\n    }\n\n    // CSS styles for bar\n    var style: CSSProperties = {\n        height: ((props.size / props.maxSize) * 100).toString() + \"%\",\n        background: col,\n        transition: \"height \" + props.speed + \"ms ease\",\n    };\n    return <div className=\"bar\" style={style}></div>;\n};\n","import React from \"react\";\nimport { barContainerProps } from \"../../types\";\nimport { Bar } from \"./bar\";\n\n// React element for the bar container\nexport const BarContainer = (props: barContainerProps) => {\n    return (\n        <div className=\"barContainer\">\n            {props.bars.map(\n                (\n                    bar //loop through all the array, creating a bar for each\n                ) => (\n                    <Bar\n                        size={bar.size}\n                        maxSize={props.maxSize}\n                        key={props.bars.indexOf(bar)}\n                        state={bar.state}\n                        speed={props.speed}\n                    />\n                )\n            )}\n        </div>\n    );\n};\n","import React from \"react\";\nimport { metricsProps } from \"../../types\";\nimport './info.css'\n\n// React element for the Metrics\nexport const Metrics = (props: metricsProps) => {\n    return (\n        <div className=\"metrics\">\n            <span>Comparisons: {props.comparisons}</span>\n            <span>Swaps: {props.swaps}</span>\n        </div>\n    );\n};\n","import React from \"react\";\n\nexport default class ColourInfo extends React.Component {\n    render() {\n        return (\n            <ul className=\"ColourList\">\n                <li className=\"colourItem\">\n                    <div\n                        className=\"colourBox\"\n                        style={{ background: \"var(--nord10)\" }}\n                    ></div>\n                    Unsorted\n                </li>\n                <li className=\"colourItem\">\n                    <div\n                        className=\"colourBox\"\n                        style={{ background: \"var(--nord11)\" }}\n                    ></div>\n                    Selected\n                </li>\n                <li className=\"colourItem\">\n                    <div\n                        className=\"colourBox\"\n                        style={{ background: \"var(--nord15)\" }}\n                    ></div>\n                    Pivot\n                </li>\n                <li className=\"colourItem\">\n                    <div\n                        className=\"colourBox\"\n                        style={{ background: \"var(--nord14)\" }}\n                    ></div>\n                    Sorted\n                </li>\n            </ul>\n        );\n    }\n}\n","import React from \"react\";\nimport SpeedSelector from \"../controlls/speedSelector\";\nimport { bubble, insertion, merge, quick, selection } from \"../../algorithms\";\nimport { appState, bar, stage } from \"../../types\";\nimport Description from \"../info/description\";\nimport ProgressBar from \"./progressBar\";\nimport AlgoritmSelector from \"../controlls/algoritmSelector\";\nimport BackButton from \"../controlls/backButton\";\nimport StartStopButton from \"../controlls/startStopButton\";\nimport ForwardButton from \"../controlls/forwardButton\";\nimport ResetButton from \"../controlls/resetButton\";\nimport NumOBarsSelector from \"../controlls/numOBarsSelector\";\nimport { BarContainer } from \"./barContainer\";\nimport { Metrics } from \"../info/metrics\";\nimport ColourInfo from \"../info/colourInfo\";\n\n// function for creating a delay\nconst pause = (time: number) => {\n    return new Promise((resolve) => setTimeout(resolve, time));\n};\n\n// Base app\nclass Sorting extends React.Component<any, appState> {\n    componentDidMount() {\n        // runs once the component has been loaded\n        this.makeBars();\n    }\n\n    state = {\n        numOBars: 50,\n        bars: [],\n        algorithms: [\n            \"Bubble Sort\",\n            \"Quick Sort\",\n            \"Insertion Sort\",\n            \"Merge Sort\",\n            \"Selection Sort\",\n        ],\n        isRunning: false,\n        sortingStages: [],\n        sortingStage: 0,\n        selectedAlgorithm: \"\",\n        stagesGenerated: false,\n        speed: 250,\n        comparisons: 0,\n        swaps: 0,\n    };\n\n    // method to make the bars\n    // if no parameters are entered, n is taken to be the number of bars\n    makeBars = (n = this.state.numOBars) => {\n        var b = [];\n        var newbar: bar;\n        for (let i = 0; i < n; i++) {\n            // create an array b containing 1 -> n\n            newbar = { size: i + 1, state: \"unsorted\" };\n            b.push(newbar);\n        }\n\n        // shuffles array\n        for (let i = b.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [b[i], b[j]] = [b[j], b[i]];\n        }\n\n        this.setState({\n            bars: b,\n            numOBars: n,\n            isRunning: false,\n            stagesGenerated: false,\n            sortingStage: 0,\n            sortingStages: [],\n            swaps: 0,\n            comparisons: 0,\n        }); // sets the state of bars to be b and numOBars to be n\n    };\n\n    // method to set the selected algorithm\n    setAlgorithm = (algorithm: string) => {\n        if (this.state.sortingStage > 0 ) {\n            this.setState((prevState: any) => ({\n                bars: prevState.sortingStages[0].bars,\n                selectedAlgorithm: algorithm,\n                stagesGenerated: false,\n                isRunning: false,\n                sortingStage: 0,\n                swaps: 0,\n                comparisons: 0,\n            }));\n        } \n        else {\n            this.setState({\n                selectedAlgorithm: algorithm,\n                stagesGenerated: false,\n                isRunning: false,\n                sortingStage: 0,\n            });\n        }\n        \n    };\n\n    // method to set the speed of the visuliser\n    setSpeed = (speed: number) => {\n        this.setState({ speed: speed });\n    };\n\n    // method to run whichever sorting algorithm is selected\n    runAlgorithm = () => {\n        var sortingStages: stage[] = [];\n        switch (\n            this.state.selectedAlgorithm // Switch statement to select the algorithm to use\n        ) {\n            case \"Bubble Sort\":\n                sortingStages = bubble(\n                    JSON.parse(JSON.stringify(this.state.bars)) // remove object refrences\n                );\n                break;\n            case \"Quick Sort\":\n                sortingStages = quick(\n                    JSON.parse(JSON.stringify(this.state.bars)) // remove object refrences\n                );\n                break;\n            case \"Insertion Sort\":\n                sortingStages = insertion(\n                    JSON.parse(JSON.stringify(this.state.bars)) // remove object refrences\n                );\n                break;\n            case \"Merge Sort\":\n                sortingStages = merge(\n                    JSON.parse(JSON.stringify(this.state.bars)) // remove object refrences\n                );\n                break;\n            case \"Selection Sort\":\n                sortingStages = selection(\n                    JSON.parse(JSON.stringify(this.state.bars)) // remove object refrences\n                );\n                break;\n        }\n        this.setState({\n            sortingStages: sortingStages,\n            sortingStage: 0,\n            stagesGenerated: true,\n        }); // sets the sortingStages array inside the state to be the stages genetrated by the algorithm, also sets the sorting stage to 0\n    };\n\n    // method to toggle the display state of the algorithm\n    togglePlayState = async () => {\n        if (this.state.selectedAlgorithm == \"\") {\n            alert(\"No algorithm selected\");\n        } else {\n            if (!this.state.stagesGenerated) {\n                // generates the stages if not generated\n                await this.runAlgorithm();\n            }\n            await this.setState((prevState: any) => ({\n                //wait for the state to be toggled\n                isRunning: !prevState.isRunning,\n            }));\n            this.visulise();\n        }\n    };\n\n    // steps forward through the visulisation by one step\n    stepForward = async () => {\n        if (this.state.selectedAlgorithm == \"\") {\n            // checks if algorithm is selected\n            alert(\"No algorithm selected\");\n        } else {\n            if (!this.state.stagesGenerated) {\n                // runs algorithm is no steps are generated\n                await this.runAlgorithm();\n            }\n            this.setState({ isRunning: false }); // sets running to false to stop the visulisation if it is running\n            if (\n                this.state.stagesGenerated &&\n                this.state.sortingStage < this.state.sortingStages.length - 1\n            ) {\n                // sets the state to be the next stage of the sorting and increments sortingStage\n                this.setState((prevState: any) => ({\n                    bars: prevState.sortingStages[prevState.sortingStage + 1]\n                        .bars,\n                    swaps: prevState.sortingStages[prevState.sortingStage + 1]\n                        .swaps,\n                    comparisons:\n                        prevState.sortingStages[prevState.sortingStage + 1]\n                            .comparisons,\n                    sortingStage: prevState.sortingStage + 1,\n                }));\n            }\n        }\n    };\n\n    // steps backwards through the visulisation by one step\n    stepBackward = async () => {\n        if (this.state.selectedAlgorithm == \"\") {\n            // checks if algorithm is selected\n            alert(\"No algorithm selected\");\n        } else {\n            if (!this.state.stagesGenerated) {\n                // runs algorithm is no steps are generated\n                await this.runAlgorithm();\n            }\n            await this.setState({ isRunning: false }); // sets running to false to stop the visulisation if it is running\n            if (this.state.stagesGenerated && this.state.sortingStage > 0) {\n                // sets the state to be the next stage of the sorting and increments sortingStage\n                this.setState((prevState: any) => ({\n                    bars: prevState.sortingStages[prevState.sortingStage - 1]\n                        .bars,\n                    swaps: prevState.sortingStages[prevState.sortingStage - 1]\n                        .swaps,\n                    comparisons:\n                        prevState.sortingStages[prevState.sortingStage - 1]\n                            .comparisons,\n                    sortingStage: prevState.sortingStage - 1,\n                }));\n            }\n        }\n    };\n\n    // method to visulise the selected algorithm\n    visulise = async () => {\n        // checks if the visulisation is running and that there are stages left to visulise\n        if (\n            this.state.isRunning &&\n            this.state.sortingStage < this.state.sortingStages.length - 1\n        ) {\n            // sets the state to be the next stage of the sorting and increments sortingStage\n            this.setState((prevState: any) => ({\n                bars: prevState.sortingStages[prevState.sortingStage + 1].bars,\n                swaps: prevState.sortingStages[prevState.sortingStage + 1]\n                    .swaps,\n                comparisons:\n                    prevState.sortingStages[prevState.sortingStage + 1]\n                        .comparisons,\n                sortingStage: prevState.sortingStage + 1,\n            }));\n            await pause(this.state.speed); // delay\n            this.visulise(); // Calls itself to keep visulising\n        }\n    };\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container visuliserContainer\">\n                    <BarContainer\n                        bars={this.state.bars}\n                        maxSize={this.state.numOBars}\n                        speed={this.state.speed}\n                    />\n                    <ProgressBar\n                        stage={this.state.sortingStage}\n                        max={this.state.sortingStages.length}\n                    />\n                </div>\n\n                <div className=\"container setupControls\">\n                    <AlgoritmSelector\n                        setAlgorithm={this.setAlgorithm}\n                        algorithms={this.state.algorithms}\n                    />\n                    <NumOBarsSelector makeBars={this.makeBars} />\n                </div>\n\n                <div className=\"container liveControls\">\n                    <BackButton stepBackward={this.stepBackward} />\n                    <StartStopButton\n                        isRunning={this.state.isRunning}\n                        togglePlayState={this.togglePlayState}\n                    />\n                    <ForwardButton stepForward={this.stepForward} />\n                    <ResetButton reset={this.makeBars} />\n                    <SpeedSelector setSpeed={this.setSpeed} />\n                </div>\n\n                <div className=\"container metricsContainer\">\n                    <Metrics\n                        swaps={this.state.swaps}\n                        comparisons={this.state.comparisons}\n                    />\n                    <ColourInfo />\n                </div>\n\n                <div className=\"container descriptionContainer\">\n                    <Description\n                        selectedAlgorithm={this.state.selectedAlgorithm}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Sorting;\n","import React from \"react\";\nimport \"./navBar.css\";\n\n// component for the navbar title\nexport default class NavTitle extends React.Component {\n    render() {\n        return <div className=\"navItem navTitle\">Algorithm Visualiser</div>;\n    }\n}\n","import React from \"react\";\nimport NavTitle from \"./navTitle\";\n\n// component for the nav bar\nexport default class NavBar extends React.Component {\n    render() {\n        return (\n            <nav className=\"navBar\">\n                <div className=\"navPart\">\n                    <NavTitle />\n                </div>\n            </nav>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/controlls/controls.css\"\nimport \"./components/info/info.css\"\nimport Sorting from \"./components/sorting/Sorting\";\nimport NavBar from \"./components/navigation/navBar\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <NavBar />\n        <Sorting />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}